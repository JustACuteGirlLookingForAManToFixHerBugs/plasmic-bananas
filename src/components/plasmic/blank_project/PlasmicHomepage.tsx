// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iNop7P1wzjQHFK3k9G7CjX
// Component: guAdI688aadU
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css" // plasmic-import: iNop7P1wzjQHFK3k9G7CjX/projectcss
import * as sty from "./PlasmicHomepage.module.css" // plasmic-import: guAdI688aadU/css

export type PlasmicHomepage__VariantMembers = {}

export type PlasmicHomepage__VariantsArgs = {}
type VariantPropType = keyof PlasmicHomepage__VariantsArgs
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>()

export type PlasmicHomepage__ArgsType = {}
type ArgPropType = keyof PlasmicHomepage__ArgsType
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>()

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">
  frame1?: p.Flex<"div">
  frame2?: p.Flex<"div">
  eye?: p.Flex<"div">
  frame3?: p.Flex<"div">
  people?: p.Flex<"div">
  frame8?: p.Flex<"div">
  frame4?: p.Flex<"div">
  heart?: p.Flex<"div">
  frame9?: p.Flex<"div">
  frame5?: p.Flex<"div">
  sugarCube?: p.Flex<"div">
  frame10?: p.Flex<"div">
  frame6?: p.Flex<"div">
  accuracy?: p.Flex<"div">
  howIsTheProductGoingToBenefitTheCompany?: p.Flex<"div">
  frame11?: p.Flex<"div">
}

export interface DefaultHomepageProps {
  className?: string
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs
  args: PlasmicHomepage__ArgsType
  overrides: PlasmicHomepage__OverridesType
  forNode?: string
}) {
  const { variants, args, overrides, forNode } = props

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div className={classNames(defaultcss.all, sty.box__rJ7Wi)}>
            <div
              data-plasmic-name={"frame1"}
              data-plasmic-override={overrides.frame1}
              className={classNames(defaultcss.all, sty.frame1)}
            />

            <div className={classNames(defaultcss.all, sty.box__hqBFp)}>
              <div
                data-plasmic-name={"frame2"}
                data-plasmic-override={overrides.frame2}
                className={classNames(defaultcss.all, sty.frame2)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__lly0Q
                  )}
                >
                  {"VISION"}
                </div>

                <div
                  data-plasmic-name={"eye"}
                  data-plasmic-override={overrides.eye}
                  className={classNames(defaultcss.all, sty.eye)}
                />

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__kYzSy
                  )}
                >
                  {"What is your purpose for creating the product?"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__d0Twp
                  )}
                >
                  {"Which positive change should it bring about?"}
                </div>
              </div>

              <div
                data-plasmic-name={"frame3"}
                data-plasmic-override={overrides.frame3}
                className={classNames(defaultcss.all, sty.frame3)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__g3F3S
                  )}
                >
                  {"TARGET GROUP"}
                </div>

                <div
                  data-plasmic-name={"people"}
                  data-plasmic-override={overrides.people}
                  className={classNames(defaultcss.all, sty.people)}
                />

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__xroNi
                  )}
                >
                  {"Which market or market segment does the product address?"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box___7E6
                  )}
                >
                  {"Who are the target customers and users?"}
                </div>

                <div
                  data-plasmic-name={"frame8"}
                  data-plasmic-override={overrides.frame8}
                  className={classNames(defaultcss.all, sty.frame8)}
                />
              </div>

              <div
                data-plasmic-name={"frame4"}
                data-plasmic-override={overrides.frame4}
                className={classNames(defaultcss.all, sty.frame4)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__nVr42
                  )}
                >
                  {"NEEDS"}
                </div>

                <div
                  data-plasmic-name={"heart"}
                  data-plasmic-override={overrides.heart}
                  className={classNames(defaultcss.all, sty.heart)}
                />

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__lMapD
                  )}
                >
                  {"What problem does the product solve?"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__c3Kmy
                  )}
                >
                  {"Which benefit does it provide?"}
                </div>

                <div
                  data-plasmic-name={"frame9"}
                  data-plasmic-override={overrides.frame9}
                  className={classNames(defaultcss.all, sty.frame9)}
                />
              </div>

              <div
                data-plasmic-name={"frame5"}
                data-plasmic-override={overrides.frame5}
                className={classNames(defaultcss.all, sty.frame5)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__w9YY0
                  )}
                >
                  {"PRODUCT"}
                </div>

                <div
                  data-plasmic-name={"sugarCube"}
                  data-plasmic-override={overrides.sugarCube}
                  className={classNames(defaultcss.all, sty.sugarCube)}
                />

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__trBxk
                  )}
                >
                  {"What makes it stand out?"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__sluxx
                  )}
                >
                  {"What product is it?"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__uIhRz
                  )}
                >
                  {"Is it feasible to develop the product?"}
                </div>

                <div
                  data-plasmic-name={"frame10"}
                  data-plasmic-override={overrides.frame10}
                  className={classNames(defaultcss.all, sty.frame10)}
                />
              </div>

              <div
                data-plasmic-name={"frame6"}
                data-plasmic-override={overrides.frame6}
                className={classNames(defaultcss.all, sty.frame6)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__x81KB
                  )}
                >
                  {"BUSINESS GOALS"}
                </div>

                <div
                  data-plasmic-name={"accuracy"}
                  data-plasmic-override={overrides.accuracy}
                  className={classNames(defaultcss.all, sty.accuracy)}
                />

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__lbBlZ
                  )}
                >
                  {"What are the business goals?"}
                </div>

                <div
                  data-plasmic-name={"howIsTheProductGoingToBenefitTheCompany"}
                  data-plasmic-override={
                    overrides.howIsTheProductGoingToBenefitTheCompany
                  }
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.howIsTheProductGoingToBenefitTheCompany
                  )}
                >
                  {"How is the product going to benefit the company? "}
                </div>

                <div
                  data-plasmic-name={"frame11"}
                  data-plasmic-override={overrides.frame11}
                  className={classNames(defaultcss.all, sty.frame11)}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: [
    "root",
    "frame1",
    "frame2",
    "eye",
    "frame3",
    "people",
    "frame8",
    "frame4",
    "heart",
    "frame9",
    "frame5",
    "sugarCube",
    "frame10",
    "frame6",
    "accuracy",
    "howIsTheProductGoingToBenefitTheCompany",
    "frame11",
  ],
  frame1: ["frame1"],
  frame2: ["frame2", "eye"],
  eye: ["eye"],
  frame3: ["frame3", "people", "frame8"],
  people: ["people"],
  frame8: ["frame8"],
  frame4: ["frame4", "heart", "frame9"],
  heart: ["heart"],
  frame9: ["frame9"],
  frame5: ["frame5", "sugarCube", "frame10"],
  sugarCube: ["sugarCube"],
  frame10: ["frame10"],
  frame6: [
    "frame6",
    "accuracy",
    "howIsTheProductGoingToBenefitTheCompany",
    "frame11",
  ],
  accuracy: ["accuracy"],
  howIsTheProductGoingToBenefitTheCompany: [
    "howIsTheProductGoingToBenefitTheCompany",
  ],
  frame11: ["frame11"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  frame1: "div"
  frame2: "div"
  eye: "div"
  frame3: "div"
  people: "div"
  frame8: "div"
  frame4: "div"
  heart: "div"
  frame9: "div"
  frame5: "div"
  sugarCube: "div"
  frame10: "div"
  frame6: "div"
  accuracy: "div"
  howIsTheProductGoingToBenefitTheCompany: "div"
  frame11: "div"
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicHomepage__VariantsArgs
  args?: PlasmicHomepage__ArgsType
  overrides?: NodeOverridesType<T>
} & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps,
    })

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage"
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`
  }
  return func
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame1: makeNodeComponent("frame1"),
    frame2: makeNodeComponent("frame2"),
    eye: makeNodeComponent("eye"),
    frame3: makeNodeComponent("frame3"),
    people: makeNodeComponent("people"),
    frame8: makeNodeComponent("frame8"),
    frame4: makeNodeComponent("frame4"),
    heart: makeNodeComponent("heart"),
    frame9: makeNodeComponent("frame9"),
    frame5: makeNodeComponent("frame5"),
    sugarCube: makeNodeComponent("sugarCube"),
    frame10: makeNodeComponent("frame10"),
    frame6: makeNodeComponent("frame6"),
    accuracy: makeNodeComponent("accuracy"),
    howIsTheProductGoingToBenefitTheCompany: makeNodeComponent(
      "howIsTheProductGoingToBenefitTheCompany"
    ),
    frame11: makeNodeComponent("frame11"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
  }
)

export default PlasmicHomepage
/* prettier-ignore-end */
